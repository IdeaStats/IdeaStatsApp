// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iKm2w5zQkVZvuqT51PP4Eo
// Component: R61mrCin7_P

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: TgJFzUZpvQ/codeComponent
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/registerForm"; // plasmic-import: EYHwZh9ILg/codeComponent
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_idea_stats_v_1.module.css"; // plasmic-import: iKm2w5zQkVZvuqT51PP4Eo/projectcss
import sty from "./PlasmicBodyForm.module.css"; // plasmic-import: R61mrCin7_P/css

export type PlasmicBodyForm__VariantMembers = {};
export type PlasmicBodyForm__VariantsArgs = {};
type VariantPropType = keyof PlasmicBodyForm__VariantsArgs;
export const PlasmicBodyForm__VariantProps = new Array<VariantPropType>();

export type PlasmicBodyForm__ArgsType = {};
type ArgPropType = keyof PlasmicBodyForm__ArgsType;
export const PlasmicBodyForm__ArgProps = new Array<ArgPropType>();

export type PlasmicBodyForm__OverridesType = {
  form?: p.Flex<typeof FormWrapper>;
  formField?: p.Flex<typeof FormItemWrapper>;
  textArea?: p.Flex<typeof AntdTextArea>;
  button?: p.Flex<typeof AntdButton>;
};

export interface DefaultBodyFormProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicBodyForm__RenderFunc(props: {
  variants: PlasmicBodyForm__VariantsArgs;
  args: PlasmicBodyForm__ArgsType;
  overrides: PlasmicBodyForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <FormWrapper
      data-plasmic-name={"form"}
      data-plasmic-override={overrides.form}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.form
      )}
      extendedOnValuesChange={p.generateStateOnChangeProp($state, [
        "form",
        "value"
      ])}
      labelCol={{ span: 8, horizontalOnly: true }}
      layout={"vertical" as const}
      wrapperCol={{ span: 16, horizontalOnly: true }}
    >
      <FormItemWrapper
        data-plasmic-name={"formField"}
        data-plasmic-override={overrides.formField}
        className={classNames("__wab_instance", sty.formField)}
        label={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4Bqrb
            )}
          >
            {"Body"}
          </div>
        }
        name={"message" as const}
      >
        {(() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.textArea),
            onChange: p.generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["textArea", "value"],
              AntdTextArea_Helpers
            ),
            value: p.generateStateValueProp($state, ["textArea", "value"])
          };
          p.initializeCodeComponentStates(
            $state,
            [
              {
                name: "value",
                plasmicStateName: "textArea.value"
              }
            ],
            [],
            AntdTextArea_Helpers ?? {},
            child$Props
          );

          return (
            <AntdTextArea
              data-plasmic-name={"textArea"}
              data-plasmic-override={overrides.textArea}
              {...child$Props}
            />
          );
        })()}
      </FormItemWrapper>
      <AntdButton
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        icon={null}
        submitsForm={true}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7MmXj
          )}
        >
          {"Done"}
        </div>
      </AntdButton>
    </FormWrapper>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  form: ["form", "formField", "textArea", "button"],
  formField: ["formField", "textArea"],
  textArea: ["textArea"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  form: typeof FormWrapper;
  formField: typeof FormItemWrapper;
  textArea: typeof AntdTextArea;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBodyForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBodyForm__VariantsArgs;
    args?: PlasmicBodyForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBodyForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBodyForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBodyForm__ArgProps,
          internalVariantPropNames: PlasmicBodyForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBodyForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "form") {
    func.displayName = "PlasmicBodyForm";
  } else {
    func.displayName = `PlasmicBodyForm.${nodeName}`;
  }
  return func;
}

export const PlasmicBodyForm = Object.assign(
  // Top-level PlasmicBodyForm renders the root element
  makeNodeComponent("form"),
  {
    // Helper components rendering sub-elements
    formField: makeNodeComponent("formField"),
    textArea: makeNodeComponent("textArea"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicBodyForm
    internalVariantProps: PlasmicBodyForm__VariantProps,
    internalArgProps: PlasmicBodyForm__ArgProps
  }
);

export default PlasmicBodyForm;
/* prettier-ignore-end */
