// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iKm2w5zQkVZvuqT51PP4Eo
// Component: zjXR6j2rv6

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Checkbox from "../../Checkbox"; // plasmic-import: RPyurRAYUmZ/component
import Select from "../../Select"; // plasmic-import: AoV4HBbmR-X/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponent
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: pTzGlMptTxd/codeComponentHelper
import TextInput from "../../TextInput"; // plasmic-import: LW1ZHmZtc1I/component
import GenericButton from "../../GenericButton"; // plasmic-import: rRlSjYLvCT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_idea_stats_v_1.module.css"; // plasmic-import: iKm2w5zQkVZvuqT51PP4Eo/projectcss
import sty from "./PlasmicRunAds.module.css"; // plasmic-import: zjXR6j2rv6/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: SvpL0X2s9gW/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: SBvHu7dbLxB/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: eUwkeFQMmR/icon

export type PlasmicRunAds__VariantMembers = {};
export type PlasmicRunAds__VariantsArgs = {};
type VariantPropType = keyof PlasmicRunAds__VariantsArgs;
export const PlasmicRunAds__VariantProps = new Array<VariantPropType>();

export type PlasmicRunAds__ArgsType = {
  allTotal?: React.ReactNode;
  googleTotal?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRunAds__ArgsType;
export const PlasmicRunAds__ArgProps = new Array<ArgPropType>(
  "allTotal",
  "googleTotal"
);

export type PlasmicRunAds__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  h2?: p.Flex<"h2">;
  checkbox?: p.Flex<typeof Checkbox>;
  googleAdsOptions?: p.Flex<"div">;
  selectCampaign?: p.Flex<typeof Select>;
  selectLocation?: p.Flex<typeof Select>;
  keyWords?: p.Flex<typeof AntdTextArea>;
  dailyCost?: p.Flex<typeof TextInput>;
  daysRunning?: p.Flex<typeof TextInput>;
  svg?: p.Flex<"svg">;
};

export interface DefaultRunAdsProps {
  allTotal?: React.ReactNode;
  googleTotal?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicRunAds__RenderFunc(props: {
  variants: PlasmicRunAds__VariantsArgs;
  args: PlasmicRunAds__ArgsType;
  overrides: PlasmicRunAds__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selectCampaign.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectLocation.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "keyWords.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dailyCost.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "daysRunning.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hRz4F)}>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Setup & Run Ads"}
            </h1>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__xhWS)}>
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {"Google Ads"}
                </h2>
                <Checkbox
                  data-plasmic-name={"checkbox"}
                  data-plasmic-override={overrides.checkbox}
                  className={classNames("__wab_instance", sty.checkbox)}
                  isChecked={
                    p.generateStateValueProp($state, [
                      "checkbox",
                      "isChecked"
                    ]) ?? false
                  }
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, [
                      "checkbox",
                      "isChecked"
                    ])(eventArgs[0]);
                  }}
                >
                  {""}
                </Checkbox>
              </div>
            ) : null}
            {true ? (
              <div
                data-plasmic-name={"googleAdsOptions"}
                data-plasmic-override={overrides.googleAdsOptions}
                className={classNames(projectcss.all, sty.googleAdsOptions)}
              >
                <Select
                  data-plasmic-name={"selectCampaign"}
                  data-plasmic-override={overrides.selectCampaign}
                  className={classNames("__wab_instance", sty.selectCampaign)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, [
                      "selectCampaign",
                      "value"
                    ])(eventArgs[0]);
                  }}
                  options={[{ value: "option1", label: "Option 1" }]}
                  placeholder={"Select campaign type..."}
                  value={p.generateStateValueProp($state, [
                    "selectCampaign",
                    "value"
                  ])}
                />

                <Select
                  data-plasmic-name={"selectLocation"}
                  data-plasmic-override={overrides.selectLocation}
                  className={classNames("__wab_instance", sty.selectLocation)}
                  onChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, [
                      "selectLocation",
                      "value"
                    ])(eventArgs[0]);
                  }}
                  options={(() => {
                    const __composite = [
                      { value: null, label: null },
                      { value: null, label: null },
                      { value: null, label: null }
                    ];
                    __composite["0"]["value"] = "Canada";
                    __composite["0"]["label"] = "Canada";
                    __composite["1"]["value"] = "USA";
                    __composite["1"]["label"] = "USA";
                    __composite["2"]["value"] = "WorldWide";
                    __composite["2"]["label"] = "WorldWide";
                    return __composite;
                  })()}
                  placeholder={"Select Location to run..."}
                  value={p.generateStateValueProp($state, [
                    "selectLocation",
                    "value"
                  ])}
                />

                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.keyWords),
                    onChange: p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["keyWords", "value"],
                      AntdTextArea_Helpers
                    ),
                    placeholder:
                      'Add keywords here like "consulting", "clothing" etc.' as const,
                    value: p.generateStateValueProp($state, [
                      "keyWords",
                      "value"
                    ])
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "keyWords.value"
                      }
                    ],
                    [],
                    AntdTextArea_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdTextArea
                      data-plasmic-name={"keyWords"}
                      data-plasmic-override={overrides.keyWords}
                      {...child$Props}
                    />
                  );
                })()}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fUzNi)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__nb4G
                      )}
                    >
                      {"Cost Per day (USD)"}
                    </h4>
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__dqIvf
                      )}
                    >
                      {"Number of days to run"}
                    </h4>
                  </div>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__px7NI)}
                  >
                    <TextInput
                      data-plasmic-name={"dailyCost"}
                      data-plasmic-override={overrides.dailyCost}
                      className={classNames("__wab_instance", sty.dailyCost)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "dailyCost",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"Maximum spend per day..." as const}
                      required={false}
                      value={
                        p.generateStateValueProp($state, [
                          "dailyCost",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <TextInput
                      data-plasmic-name={"daysRunning"}
                      data-plasmic-override={overrides.daysRunning}
                      className={classNames("__wab_instance", sty.daysRunning)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "daysRunning",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"How many days?" as const}
                      value={
                        p.generateStateValueProp($state, [
                          "daysRunning",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tAkuv)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jvAm
                      )}
                    >
                      {"Google Ads Total:"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iWlkE)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "$0",
                        value: args.googleTotal,
                        className: classNames(sty.slotTargetGoogleTotal)
                      })}
                    </div>
                  </div>
                ) : null}
                <div
                  className={classNames(projectcss.all, sty.freeBox__sgDuN)}
                />
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__k8Hlz)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oG21D)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sg3Rx
                      )}
                    >
                      {"All Ads Total:"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aWg25)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: "$0",
                        value: args.allTotal,
                        className: classNames(sty.slotTargetAllTotal)
                      })}
                    </div>
                  </div>
                ) : null}
                <div
                  className={classNames(projectcss.all, sty.freeBox__y1Nh4)}
                />
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__gdWJ)}>
                <GenericButton
                  className={classNames(
                    "__wab_instance",
                    sty.genericButton__thbH9
                  )}
                >
                  <Icon3Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </GenericButton>
                <GenericButton
                  className={classNames(
                    "__wab_instance",
                    sty.genericButton__jQesJ
                  )}
                >
                  {"Confirm"}
                </GenericButton>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "h2",
    "checkbox",
    "googleAdsOptions",
    "selectCampaign",
    "selectLocation",
    "keyWords",
    "dailyCost",
    "daysRunning",
    "svg"
  ],
  h1: ["h1"],
  h2: ["h2"],
  checkbox: ["checkbox"],
  googleAdsOptions: [
    "googleAdsOptions",
    "selectCampaign",
    "selectLocation",
    "keyWords",
    "dailyCost",
    "daysRunning"
  ],
  selectCampaign: ["selectCampaign"],
  selectLocation: ["selectLocation"],
  keyWords: ["keyWords"],
  dailyCost: ["dailyCost"],
  daysRunning: ["daysRunning"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  h2: "h2";
  checkbox: typeof Checkbox;
  googleAdsOptions: "div";
  selectCampaign: typeof Select;
  selectLocation: typeof Select;
  keyWords: typeof AntdTextArea;
  dailyCost: typeof TextInput;
  daysRunning: typeof TextInput;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRunAds__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRunAds__VariantsArgs;
    args?: PlasmicRunAds__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRunAds__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRunAds__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRunAds__ArgProps,
          internalVariantPropNames: PlasmicRunAds__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRunAds__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRunAds";
  } else {
    func.displayName = `PlasmicRunAds.${nodeName}`;
  }
  return func;
}

export const PlasmicRunAds = Object.assign(
  // Top-level PlasmicRunAds renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    h2: makeNodeComponent("h2"),
    checkbox: makeNodeComponent("checkbox"),
    googleAdsOptions: makeNodeComponent("googleAdsOptions"),
    selectCampaign: makeNodeComponent("selectCampaign"),
    selectLocation: makeNodeComponent("selectLocation"),
    keyWords: makeNodeComponent("keyWords"),
    dailyCost: makeNodeComponent("dailyCost"),
    daysRunning: makeNodeComponent("daysRunning"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicRunAds
    internalVariantProps: PlasmicRunAds__VariantProps,
    internalArgProps: PlasmicRunAds__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRunAds;
/* prettier-ignore-end */
