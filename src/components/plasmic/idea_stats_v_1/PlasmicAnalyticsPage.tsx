// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iKm2w5zQkVZvuqT51PP4Eo
// Component: EB7ppsy1rez

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import GraphSelectButton from "../../GraphSelectButton"; // plasmic-import: gnVJgCSe6k/component
import GenericButton from "../../GenericButton"; // plasmic-import: rRlSjYLvCT/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_idea_stats_v_1.module.css"; // plasmic-import: iKm2w5zQkVZvuqT51PP4Eo/projectcss
import sty from "./PlasmicAnalyticsPage.module.css"; // plasmic-import: EB7ppsy1rez/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: UVhfm8Vw8/icon

export type PlasmicAnalyticsPage__VariantMembers = {};
export type PlasmicAnalyticsPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnalyticsPage__VariantsArgs;
export const PlasmicAnalyticsPage__VariantProps = new Array<VariantPropType>();

export type PlasmicAnalyticsPage__ArgsType = {
  graph?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAnalyticsPage__ArgsType;
export const PlasmicAnalyticsPage__ArgProps = new Array<ArgPropType>("graph");

export type PlasmicAnalyticsPage__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  impressionsButton?: p.Flex<typeof GraphSelectButton>;
  clicksButton?: p.Flex<typeof GraphSelectButton>;
  cpcButton?: p.Flex<typeof GraphSelectButton>;
  refreshButton?: p.Flex<typeof GenericButton>;
  svg?: p.Flex<"svg">;
  selectButton?: p.Flex<typeof GenericButton>;
};

export interface DefaultAnalyticsPageProps {
  graph?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAnalyticsPage__RenderFunc(props: {
  variants: PlasmicAnalyticsPage__VariantsArgs;
  args: PlasmicAnalyticsPage__ArgsType;
  overrides: PlasmicAnalyticsPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__anSmu)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Analytics"}
              </h1>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__hsdQv)}>
                  {p.renderPlasmicSlot({
                    defaultContents: null,
                    value: args.graph
                  })}
                </div>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tkxiH)}
                >
                  <GraphSelectButton
                    data-plasmic-name={"impressionsButton"}
                    data-plasmic-override={overrides.impressionsButton}
                    className={classNames(
                      "__wab_instance",
                      sty.impressionsButton
                    )}
                  />

                  <GraphSelectButton
                    data-plasmic-name={"clicksButton"}
                    data-plasmic-override={overrides.clicksButton}
                    className={classNames("__wab_instance", sty.clicksButton)}
                    dataName={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x8P0W
                        )}
                      >
                        {"Clicks"}
                      </div>
                    }
                    dataValue={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zwWeR
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {"1k"}
                          </span>
                        </React.Fragment>
                      </div>
                    }
                  />

                  <GraphSelectButton
                    data-plasmic-name={"cpcButton"}
                    data-plasmic-override={overrides.cpcButton}
                    className={classNames("__wab_instance", sty.cpcButton)}
                    dataName={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d92Zh
                        )}
                      >
                        {"Av. CPC"}
                      </div>
                    }
                  />
                </p.Stack>
              ) : null}
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___655Pw)}
                >
                  <GenericButton
                    data-plasmic-name={"refreshButton"}
                    data-plasmic-override={overrides.refreshButton}
                    className={classNames("__wab_instance", sty.refreshButton)}
                  >
                    <IconIcon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  </GenericButton>
                  <GenericButton
                    data-plasmic-name={"selectButton"}
                    data-plasmic-override={overrides.selectButton}
                    className={classNames("__wab_instance", sty.selectButton)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w60PV
                      )}
                    >
                      {"Select"}
                    </div>
                  </GenericButton>
                </div>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "impressionsButton",
    "clicksButton",
    "cpcButton",
    "refreshButton",
    "svg",
    "selectButton"
  ],
  h1: ["h1"],
  impressionsButton: ["impressionsButton"],
  clicksButton: ["clicksButton"],
  cpcButton: ["cpcButton"],
  refreshButton: ["refreshButton", "svg"],
  svg: ["svg"],
  selectButton: ["selectButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  impressionsButton: typeof GraphSelectButton;
  clicksButton: typeof GraphSelectButton;
  cpcButton: typeof GraphSelectButton;
  refreshButton: typeof GenericButton;
  svg: "svg";
  selectButton: typeof GenericButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnalyticsPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnalyticsPage__VariantsArgs;
    args?: PlasmicAnalyticsPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnalyticsPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAnalyticsPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAnalyticsPage__ArgProps,
          internalVariantPropNames: PlasmicAnalyticsPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAnalyticsPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnalyticsPage";
  } else {
    func.displayName = `PlasmicAnalyticsPage.${nodeName}`;
  }
  return func;
}

export const PlasmicAnalyticsPage = Object.assign(
  // Top-level PlasmicAnalyticsPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    impressionsButton: makeNodeComponent("impressionsButton"),
    clicksButton: makeNodeComponent("clicksButton"),
    cpcButton: makeNodeComponent("cpcButton"),
    refreshButton: makeNodeComponent("refreshButton"),
    svg: makeNodeComponent("svg"),
    selectButton: makeNodeComponent("selectButton"),

    // Metadata about props expected for PlasmicAnalyticsPage
    internalVariantProps: PlasmicAnalyticsPage__VariantProps,
    internalArgProps: PlasmicAnalyticsPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAnalyticsPage;
/* prettier-ignore-end */
