// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iKm2w5zQkVZvuqT51PP4Eo
// Component: NfWt_UBWT-

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_idea_stats_v_1.module.css"; // plasmic-import: iKm2w5zQkVZvuqT51PP4Eo/projectcss
import sty from "./PlasmicLoadingBox.module.css"; // plasmic-import: NfWt_UBWT-/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: UVhfm8Vw8/icon

export type PlasmicLoadingBox__VariantMembers = {};
export type PlasmicLoadingBox__VariantsArgs = {};
type VariantPropType = keyof PlasmicLoadingBox__VariantsArgs;
export const PlasmicLoadingBox__VariantProps = new Array<VariantPropType>();

export type PlasmicLoadingBox__ArgsType = {
  loadingIcon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicLoadingBox__ArgsType;
export const PlasmicLoadingBox__ArgProps = new Array<ArgPropType>(
  "loadingIcon"
);

export type PlasmicLoadingBox__OverridesType = {
  loadingBox?: p.Flex<"div">;
  loadingCover?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultLoadingBoxProps {
  loadingIcon?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicLoadingBox__RenderFunc(props: {
  variants: PlasmicLoadingBox__VariantsArgs;
  args: PlasmicLoadingBox__ArgsType;
  overrides: PlasmicLoadingBox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <div
        data-plasmic-name={"loadingBox"}
        data-plasmic-override={overrides.loadingBox}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.loadingBox
        )}
      >
        <div
          data-plasmic-name={"loadingCover"}
          data-plasmic-override={overrides.loadingCover}
          className={classNames(projectcss.all, sty.loadingCover)}
        />

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__k42)}
                role={"img"}
              />
            ),

            value: args.loadingIcon
          })}
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  loadingBox: ["loadingBox", "loadingCover", "freeBox"],
  loadingCover: ["loadingCover"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  loadingBox: "div";
  loadingCover: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoadingBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoadingBox__VariantsArgs;
    args?: PlasmicLoadingBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoadingBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLoadingBox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLoadingBox__ArgProps,
          internalVariantPropNames: PlasmicLoadingBox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoadingBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "loadingBox") {
    func.displayName = "PlasmicLoadingBox";
  } else {
    func.displayName = `PlasmicLoadingBox.${nodeName}`;
  }
  return func;
}

export const PlasmicLoadingBox = Object.assign(
  // Top-level PlasmicLoadingBox renders the root element
  makeNodeComponent("loadingBox"),
  {
    // Helper components rendering sub-elements
    loadingCover: makeNodeComponent("loadingCover"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicLoadingBox
    internalVariantProps: PlasmicLoadingBox__VariantProps,
    internalArgProps: PlasmicLoadingBox__ArgProps
  }
);

export default PlasmicLoadingBox;
/* prettier-ignore-end */
